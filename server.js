const express = require('express');
const fs = require('fs');
const path = require('path');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;
const WISHES_FILE = path.join(__dirname, 'data', 'wishes.json');

// ƒê·∫£m b·∫£o th∆∞ m·ª•c data t·ªìn t·∫°i
if (!fs.existsSync(path.join(__dirname, 'data'))) {
    fs.mkdirSync(path.join(__dirname, 'data'));
}

// Middleware
app.use(cors());
app.use(bodyParser.json());

// ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
function readWishes() {
    try {
        const data = fs.readFileSync(WISHES_FILE, 'utf8');
        return JSON.parse(data);
    } catch (err) {
        if (err.code === 'ENOENT') {
            // N·∫øu file kh√¥ng t·ªìn t·∫°i, t·∫°o file m·ªõi v·ªõi d·ªØ li·ªáu m·∫´u
            const defaultWishes = [
                {
                    id: "sample1",
                    name: "Huy Ho√†ng",
                    message: "Ch√∫c c·∫£ l·ªõp lu√¥n vui v·∫ª, h·∫°nh ph√∫c v√† th√†nh c√¥ng trong m·ªçi vi·ªác! üíñ",
                    type: "general",
                    timestamp: Date.now() - 3600000
                }
            ];
            fs.writeFileSync(WISHES_FILE, JSON.stringify(defaultWishes, null, 2));
            return defaultWishes;
        }
        console.error('L·ªói khi ƒë·ªçc file:', err);
        return [];
    }
}

// Ghi d·ªØ li·ªáu v√†o file JSON
function writeWishes(wishes) {
    try {
        fs.writeFileSync(WISHES_FILE, JSON.stringify(wishes, null, 2));
        return true;
    } catch (err) {
        console.error('L·ªói khi ghi file:', err);
        return false;
    }
}

// Validate d·ªØ li·ªáu l·ªùi ch√∫c
function validateWish(wish) {
    const errors = [];
    
    if (!wish.name || wish.name.trim().length < 2) {
        errors.push('T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
    }
    
    if (!wish.message || wish.message.trim().length < 10) {
        errors.push('L·ªùi ch√∫c ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±');
    }
    
    if (wish.name && wish.name.length > 50) {
        errors.push('T√™n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±');
    }
    
    if (wish.message && wish.message.length > 1000) {
        errors.push('L·ªùi ch√∫c kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±');
    }
    
    // Ki·ªÉm tra lo·∫°i l·ªùi ch√∫c h·ª£p l·ªá
    const validTypes = ['general', 'love', 'friendship', 'encouragement', 'memory'];
    if (!validTypes.includes(wish.type)) {
        errors.push('Lo·∫°i l·ªùi ch√∫c kh√¥ng h·ª£p l·ªá');
    }
    
    return errors.length === 0 ? null : errors;
}

// API endpoints
app.get('/api/wishes', (req, res) => {
    try {
        const wishes = readWishes();
        // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
        const sortedWishes = wishes.sort((a, b) => b.timestamp - a.timestamp);
        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tr·∫£ v·ªÅ (t·ªëi ƒëa 50)
        const limitedWishes = sortedWishes.slice(0, 50);
        res.json(limitedWishes);
    } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu:', error);
        res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i l·ªùi ch√∫c' });
    }
});

app.post('/api/wishes', (req, res) => {
    try {
        const validationErrors = validateWish(req.body);
        if (validationErrors) {
            return res.status(400).json({ errors: validationErrors });
        }

        const wishes = readWishes();
        const newWish = {
            id: Date.now().toString(),
            name: req.body.name.trim(),
            message: req.body.message.trim(),
            type: req.body.type,
            timestamp: Date.now()
        };
        
        // Th√™m v√†o ƒë·∫ßu m·∫£ng
        wishes.unshift(newWish);
        
        // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l∆∞u tr·ªØ (t·ªëi ƒëa 50)
        const limitedWishes = wishes.slice(0, 50);
        
        if (writeWishes(limitedWishes)) {
            res.status(201).json(newWish);
        } else {
            res.status(500).json({ error: 'Kh√¥ng th·ªÉ l∆∞u l·ªùi ch√∫c' });
        }
    } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu:', error);
        res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói khi l∆∞u l·ªùi ch√∫c' });
    }
});

// X·ª≠ l√Ω 404
app.use((req, res) => {
    res.status(404).send('Kh√¥ng t√¨m th·∫•y trang');
});

// X·ª≠ l√Ω l·ªói
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('ƒê√£ x·∫£y ra l·ªói!');
});

// Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
    console.log(`Server API ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    console.log(`B·∫°n c√≥ th·ªÉ truy c·∫≠p c√°c endpoint:`);
    console.log(`- GET /api/wishes - L·∫•y danh s√°ch l·ªùi ch√∫c`);
    console.log(`- POST /api/wishes - G·ª≠i l·ªùi ch√∫c m·ªõi`);
});
